(re (str ""(?i)[a-z0-9!#$%&'*+/=?^_`{|}~-]+"
                "(?:\\.[a-z0-9!#$%&'*+/=?" "^_`{|}~-]+)*"
                "@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+"
(re (str "(?i)[a-z0-9!#$%&'*+/=?^_`{|}~-]+"
                "(?:\\.[a-z0-9!#$%&'*+/=?" "^_`{|}~-]+)*"
                "@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+"
                "[a-z0-9](?:[a-z0-9-]*[a-z0-9])?"))
quit
(map even? [1 3 5 7])
(filter (complement false?) [1 3 5 7])
(filter (complement false?) (map even? [1 3 5 7]))
(filter (complement false?) (map even? [1 3 5 7 8]))
(first (filter (complement false?) (map even? [1 3 5 7 8])))
(first (filter (complement false?) (map even? [1 3 5 7])))
(use 'predicates :reload-all)
(my-some even? [1 3 5 7])
(my-some even? [1 3 5 7 8])
(my-some neg? [1 3 5 0 7 8])
(my-some neg? [1 3 5 0 7 -1 8])
(my-some neg? [])
(my-some first [[false] [1]])
(my-some first [[false] []])
(use 'predicates :reload-all)
(map first [[false] [1]])
(use 'predicates :reload-all)
(my-some even? [1 3 5 7])
(my-some even? [1 3 5 7 8])
(my-some first [[false] [1]])
(my-some first [[false] []])
((complement my-some) even [1 2 3 4])
((complement my-some) even? [1 2 3 4])
((complement my-some) even? [2 4 6 8])
(use 'predicates :reload-all)
(my-every even? [1 2 3 4])
(my-every? even? [1 2 3 4])
(my-every? pos? [1 2 3 4])
(my-every? pos? [1 2 3 4 0])
(my-every? even? [2 4 6])
(mod 10 5)
(mod 5 10)
(use 'predicates :reload-all)
(prime 4)
(prime? 4)
(prime? 7)
(prime? 10)
(filter prime? (range 2 50))
quit
